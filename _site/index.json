{
  "docs/Nunit/功能.html": {
    "href": "docs/Nunit/功能.html",
    "title": "| MyCSharpDocs",
    "summary": "Nunit 功能介绍 NUnit 是一个流行的开源单元测试框架，专为 .NET 平台设计。它提供了一套丰富的功能，帮助开发者编写、组织和运行单元测试，从而提高代码质量和可靠性。以下是 NUnit 的一些主要功能： 丰富的断言库 NUnit 提供了多种断言方法，允许开发者验证代码行为是否符合预期。例如，Assert.AreEqual、Assert.IsTrue、Assert.Throws 等，覆盖了各种常见的测试场景。 [Test] public void TestAddition() { int result = Calculator.Add(2, 3); Assert.AreEqual(5, result); } 灵活的测试组织 NUnit 支持通过属性（Attributes）来组织测试用例。开发者可以使用 [TestFixture] 来定义测试类，使用 [Test] 来标记测试方法，还可以使用 [SetUp] 和 [TearDown] 来进行测试前后的初始化和清理工作。 [SetUp]作用：在测试方法执行之前执行，通常用于初始化测试环境。 [TearDown] 作用：在测试方法执行之后执行，通常用于清理测试环境。 [TestFixture] public class CalculatorTests { private Calculator calculator; [SetUp] public void Setup() { calculator = new Calculator(); } [Test] public void TestAddition() { int result = calculator.Add(2, 3); Assert.AreEqual(5, result); } [TearDown] public void Teardown() { // 清理资源 } } 参数化测试 NUnit 支持参数化测试，允许开发者使用不同的输入数据运行同一个测试方法。可以使用 [TestCase] 属性来定义多个测试用例。 [Test] [TestCase(2, 3, 5)] [TestCase(-1, 1, 0)] [TestCase(0, 0, 0)] public void TestAddition(int a, int b, int expected) { int result = calculator.Add(a, b); Assert.AreEqual(expected, result); } 并行测试执行 NUnit 支持并行执行测试用例，能够显著减少测试运行时间。开发者可以通过配置属性来启用并行测试。 [TestFixture] [Parallelizable(ParallelScope.All)] public class CalculatorTests { // 测试方法 } 测试结果报告 NUnit 提供了多种格式的测试结果报告，方便开发者查看测试结果和分析失败原因。可以生成 XML、HTML 等格式的报告。 nunit3-console.exe MyTests.dll --result=TestResult.xml;format=nunit2 集成支持 NUnit 可以与多种持续集成工具（如 Jenkins、Azure DevOps、GitHub Actions 等）集成，方便自动化测试流程。 - name: Run NUnit Tests run: | dotnet test MyTests.csproj --logger \"trx;LogFileName=test_results.trx\" 扩展性 NUnit 提供了丰富的扩展点，允许开发者创建自定义的断言、属性和测试运行器，以满足特定的测试需求。 public class CustomAssert { public static void IsPositive(int value) { Assert.IsTrue(value > 0, \"Value should be positive\"); } } Assert的断言方法 在 NUnit 新的约束模型中，Assert 类提供了多种断言方法用于验证测试条件。以下是常用的断言方法分类和说明： Assert.Multiple Assert.Multiple NUnit 提供了一个名为 Assert.Multiple 的方法，允许在单个测试方法中运行多个断言。其作原理是，在测试方法中，使用 Assert.Multiple 方法包裹多个断言，然后使用 Assert.Multiple.End 方法结束。区别于单个断言，多个断言可以一起运行，如果其中某个断言失败，则整个测试方法会失败。 基本断言 Assert.That(actual, Is.EqualTo(expected)) - 验证两个值是否相等 Assert.That(actual, Is.Not.EqualTo(expected)) - 验证两个值是否不相等 Assert.That(actual, Is.SameAs(expected)) - 验证两个对象是否引用同一个实例 Assert.That(actual, Is.Not.SameAs(expected)) - 验证两个对象是否引用不同实例 Assert.That(object, Is.Null) - 验证对象是否为 null Assert.That(object, Is.Not.Null) - 验证对象是否不为 null Assert.That(condition, Is.True) - 验证条件是否为 true Assert.That(condition, Is.False) - 验证条件是否为 false 数值比较断言 Assert.That(value, Is.GreaterThan(expected)) - 验证值是否大于期望值 Assert.That(value, Is.GreaterThanOrEqualTo(expected)) - 验证值是否大于等于期望值 Assert.That(value, Is.LessThan(expected)) - 验证值是否小于期望值 Assert.That(value, Is.LessThanOrEqualTo(expected)) - 验证值是否小于等于期望值 Assert.That(value, Is.InRange(min, max)) - 验证值是否在指定范围内 字符串断言 Assert.That(actual, Does.Contain(expected)) - 验证字符串是否包含指定子串 Assert.That(actual, Does.StartWith(expected)) - 验证字符串是否以指定前缀开始 Assert.That(actual, Does.EndWith(expected)) - 验证字符串是否以指定后缀结束 Assert.That(actual, Is.EqualTo(expected).IgnoreCase) - 验证字符串是否相等（忽略大小写） Assert.That(actual, Does.Not.Contain(unexpected)) - 验证字符串是否不包含指定子串 集合断言 Assert.That(collection, Is.EquivalentTo(expected)) - 验证两个集合是否包含相同元素 Assert.That(collection, Contains.Item(element)) - 验证集合是否包含指定元素 Assert.That(collection, Does.Not.Contain(element)) - 验证集合是否不包含指定元素 Assert.That(collection, Is.Empty) - 验证集合是否为空 Assert.That(collection, Is.Not.Empty) - 验证集合是否不为空 Assert.That(collection, Has.Count.EqualTo(expected)) - 验证集合元素数量 文件断言 Assert.That(file, Does.Exist) - 验证文件是否存在 Assert.That(file, Does.Not.Exist) - 验证文件是否不存在 异常断言 Assert.That(code, Throws.TypeOf<ExceptionType>()) - 验证代码是否抛出指定类型的异常 Assert.That(code, Throws.Nothing) - 验证代码是否不抛出异常 Assert.That(code, Throws.Exception.With.Message.Contains(expected)) - 验证异常消息 逻辑组合断言 Assert.That(actual, Is.Not.EqualTo(unexpected)) - 逻辑非 Assert.That(actual, Is.GreaterThan(min).And.LessThan(max)) - 逻辑与 Assert.That(actual, Is.LessThan(min).Or.GreaterThan(max)) - 逻辑或 这些断言方法使用 NUnit 的约束模型，提供了更自然的语法和更好的错误消息，帮助开发者编写更具表达力的单元测试。 这些断言方法可以帮助开发者编写全面的单元测试，验证各种条件和场景。 总结 NUnit 是一个功能强大且灵活的单元测试框架，提供了丰富的功能来支持各种测试需求。通过使用 NUnit，开发者可以更轻松地编写高质量的测试用例，从而提升代码的可靠性和维护性。"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | MyCSharpDocs",
    "summary": "Getting Started 下面是 Calculator 类中的一个加法函数示例： public class Calculator { /// <summary> /// 计算两个整数的和。 /// </summary> /// <param name=\"a\">第一个整数</param> /// <param name=\"b\">第二个整数</param> /// <returns>两数之和</returns> public int Add(int a, int b) { return a + b; } } 你可以在任何支持 C# 高亮的 Markdown 渲染器中看到漂亮的语法着色。"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction66999 | MyCSharpDocs",
    "summary": "Introduction66999"
  },
  "docs/字符串/基本操作.html": {
    "href": "docs/字符串/基本操作.html",
    "title": "| MyCSharpDocs",
    "summary": "下面是对这三种特性及其组合的全面介绍： C# 字符串处理三剑客：@、$ 和 \"\"\" 逐字字符串 (Verbatim Strings) - @ 语法：以 @ 符号开头，后跟双引号包围的字符串。 string path = @\"C:\\Users\\John\\Documents\\file.txt\"; string multiLine = @\"第一行 第二行 第三行\"; 功能： 忽略转义序列：字符串中的反斜杠 \\ 被视为普通字符，不需要转义。这在处理文件路径、正则表达式时非常方便。 支持多行：可以直接换行，换行符会成为字符串的一部分。 限制： 双引号需要转义：如果字符串内部需要包含双引号 \"，必须用两个双引号 \"\" 来表示。 string quote = @\"She said, \"\"Hello!\"\"\"; 格式受限：虽然支持多行，但格式（如缩进）会原样保留，有时不够灵活。 内插字符串 (Interpolated Strings) - $ 语法：以 $ 符号开头，后跟双引号包围的字符串，字符串中使用 {} 包围表达式。 string name = \"Alice\"; int age = 30; string greeting = $\"Hello, {name}! You are {age} years old.\"; // 结果: \"Hello, Alice! You are 30 years old.\" 功能： 嵌入表达式：可以直接在字符串中嵌入变量、属性、方法调用甚至复杂的表达式。 格式化：支持格式说明符。 double price = 123.456; string formatted = $\"Price: {price:C2}\"; // 货币格式，保留两位小数 优势：比 string.Format 或 + 拼接更直观、更易读。 、 原始字符串字面量 (Raw String Literals) - \"\"\" (C# 11+) 如前所述，使用三个双引号 \"\"\" 定界，提供最强大的多行和无转义体验。 组合使用：@、$ 和 \"\"\" 的协同效应 这三种特性可以按特定顺序组合，发挥最大威力。 组合 1: $ + @ (内插 + 逐字) 这是 C# 11 之前的经典组合，用于在逐字字符串中进行内插。 语法：\\(@\"...\" (注意顺序：\\) 在 @ 前) 示例： string directory = \"MyProject\"; string filePath = $@\"C:\\Projects\\{directory}\\config.json\"; // 结果: \"C:\\Projects\\MyProject\\config.json\" string name = \"Bob\"; string sql = $@\" SELECT FROM Users WHERE Name = '{name}' AND Status = 'Active'; \"; 注意：双引号仍需用 \"\" 转义。 组合 2: $ + \"\"\" (内插 + 原始) - 推荐！ C# 11 引入原始字符串后，这是处理复杂内插文本的最佳方式。 语法：\\(\"\"\"...\"\"\" (注意顺序：\\) 在 \"\"\" 前) 优势： 无需转义双引号和反斜杠。 支持多行。 支持内插。 支持修剪。 示例： string userName = \"Alice\"; int minAge = 18; string complexQuery = $\"\"\" SELECT u.Name, u.Email, o.OrderTotal FROM Users u LEFT JOIN Orders o ON u.Id = o.UserId WHERE u.Name LIKE '%{userName}%' AND u.Age >= {minAge} AND u.Status IN ('Active', 'Verified') ORDER BY o.OrderTotal DESC; \"\"\"; // JSON 内插 string status = \"Online\"; string userJson = $\"\"\" {{ \"name\": \"Charlie\", \"status\": \"{status}\", \"lastSeen\": \"{DateTime.UtcNow:O}\" }} \"\"\"; 注意： 修剪：原始字符串会自动移除首尾空白字符。 组合 3: $ + @ + \"\"\" 虽然语法上允许 $@\"\"\"...\"\"\"，但 @ 在原始字符串中是冗余的，因为原始字符串本身就具备逐字特性。直接使用 $\"\"\"...\"\"\" 即可。 对比总结表 特性 语法 多行 无需转义 \\ 无需转义 \" 内插 修剪 推荐场景 :--- :--- :--- :--- :--- :--- :--- :--- 普通字符串 \"...\" ❌ (需 \\n) ❌ ❌ ❌ ❌ 简单单行文本 逐字字符串 @\"...\" ✅ ✅ ❌ (\"\") ❌ ❌ 文件路径、简单多行 内插字符串 $\"...\" ❌ (需 \\n) ❌ ❌ ✅ ❌ 简单内插 逐字内插 $@\"...\" ✅ ✅ ❌ (\"\") ✅ ❌ C# 11 前的复杂内插 原始字符串 \"\"\"...\"\"\" ✅ ✅ ✅ ❌ ✅ 复杂多行文本 (无内插) 原始内插 $\"\"\"...\"\"\" ✅ ✅ ✅ ✅ ✅ C# 11+ 的首选方式 最佳实践建议 C# 11 及以上项目： 对于任何复杂的、多行的、包含引号或反斜杠的字符串（尤其是 JSON、SQL、HTML、正则表达式），优先使用 $\"\"\"...\"\"\"。 它结合了所有优点，代码最清晰。 旧版 C# 项目： 使用 $@\"...\" 作为替代方案。 记住双引号需要用 \"\" 转义。 简单场景： 单行简单文本用 \"...\"。 单行路径用 @\"...\"。 避免混合 @ 和 \"\"\"： $@\"\"\"...\"\"\" 虽然合法，但 @ 是多余的，直接用 $\"\"\"...\"\"\" 更简洁。 总结：$\"\"\"...\"\"\" 是现代 C# 中处理复杂字符串的终极武器。它让你可以像写纯文本一样编写字符串，同时享受内插和格式化的便利，是提升代码可读性和开发效率的利器。 好的，这是关于 C# 原始字符串字面量（Raw String Literals）的详细介绍。 C# 原始字符串字面量 (Raw String Literals) 全面介绍 从 C# 11 开始，C# 引入了原始字符串字面量 (Raw String Literals)。这是一个强大的新特性，旨在解决传统字符串在处理多行文本、包含大量引号或转义字符时的繁琐和易错问题。 什么是原始字符串字面量？ 原始字符串字面量允许你以最接近其最终形式的方式来定义字符串。它使用三个双引号 \"\"\" 作为定界符，字符串的内容被原封不动地包含在这些定界符之间。 核心特点： 多行支持：可以自然地跨越多行。 无需转义：字符串内部的引号 \"、反斜杠 \\、换行符等都不需要使用反斜杠进行转义。 保留格式：字符串的格式（包括缩进和空格）会被精确地保留。 2. 基本语法 string myString = \"\"\" 包含字符串内容的文本 可以跨越多行 \"\"\"; 开始定界符：\"\"\" (三个双引号)。 结束定界符：\"\"\" (三个双引号)，必须独占一行，并且其前面不能有任何空格或制表符（除非使用修剪功能，见下文）。 内容：开始和结束定界符之间的所有字符，包括换行符和空格，都会成为字符串的一部分。 3. 主要优势与应用场景 ✅ 优势 1：简化多行字符串 无需使用 + 拼接或 \\n 换行符。 // C# 11 之前 string poem = \"春风又绿江南岸，\\n\" + \"明月何时照我还？\\n\" + \"举头望明月，\\n\" + \"低头思故乡。\"; // C# 11 使用原始字符串 string poem = \"\"\" 春风又绿江南岸， 明月何时照我还？ 举头望明月， 低头思故乡。 \"\"\"; ✅ 优势 2：无需转义引号 在 JSON、SQL 或包含引号的文本中，再也不用写 \" 了。 // C# 11 之前 - 需要转义引号 string json = \"{\\\"name\\\": \\\"John\\\", \\\"age\\\": 30, \\\"city\\\": \\\"New York\\\"}\"; // C# 11 使用原始字符串 - 引号无需转义 string json = \"\"\"{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\"\"\"; // 更复杂的 JSON 示例 string complexJson = \"\"\" { \"users\": [ { \"id\": 1, \"name\": \"Alice\", \"preferences\": { \"theme\": \"dark\", \"notifications\": true } } ] } \"\"\"; ✅ 优势 3：简化正则表达式 正则表达式中反斜杠 \\ 非常常见，传统字符串需要写成 \\。 // C# 11 之前 - 每个反斜杠都需要转义 string regexPattern = \"^\\\\d{3}-\\\\d{2}-\\\\d{4}$\"; // 匹配 Social Security Number // C# 11 使用原始字符串 - 反斜杠无需转义 string regexPattern = \"\"\"^\\d{3}-\\d{2}-\\d{4}$\"\"\"; ✅ 优势 4：编写清晰的 SQL 查询 string query = \"\"\" SELECT u.Name, o.OrderDate, o.Total FROM Users u JOIN Orders o ON u.Id = o.UserId WHERE u.Status = 'Active' AND o.OrderDate >= '2023-01-01' ORDER BY o.OrderDate DESC; \"\"\"; 高级功能：修剪 (Trimming) 和控制结束定界符位置 原始字符串字面量支持一个非常实用的功能：通过在结束定界符 \"\"\" 前添加空格或制表符来修剪字符串开头的空白。 规则：编译器会找到所有行（包括结束定界符所在行）开头的公共空白前缀，然后将其从每行中移除。 // 示例 1：修剪左侧空白 string text = \"\"\" 这行有 4 个空格的缩进。 这行有 8 个空格的缩进。 \"\"\"; // 结果字符串： // \"这行有 4 个空格的缩进。\\n 这行有 8 个空格的缩进。\\n\" // 示例 2：将结束定界符与内容对齐（常用） string aligned = \"\"\" SELECT FROM Users WHERE Active = 1 ORDER BY Name; \"\"\"; // 结果字符串： // \"这行有 4 个空格的缩进。\\n 这行有 8 个空格的缩进。\\n\" // 示例 2：将结束定界符与内容对齐（常用） string aligned = \"\"\" SELECT FROM Users WHERE Active = 1 ORDER BY Name; \"\"\"; // 结果字符串： // \"SELECT FROM Users\\nWHERE Active = 1\\nORDER BY Name;\\n\" // （左侧的 16 个空格被修剪掉了） // 示例 3：混合空格和制表符（不推荐，行为可能复杂） // 最好统一使用空格或制表符。 5. 插值 (Interpolation) 支持 原始字符串字面量完全支持字符串插值 $。 string name = \"Alice\"; int age = 30; string message = $\"\"\" Hello, my name is {name}. I am {age} years old. \"\"\"; // 结果: \"Hello, my name is Alice.\\nI am 30 years old.\\n\" 注意：插值表达式 {} 内部仍然遵循正常的 C# 语法，如果需要在插值表达式中使用 \"\"\"，可能需要额外的处理。 6. 注意事项与最佳实践 C# 11 及以上：确保你的项目目标框架支持 C# 11 (.NET 7 或更高版本，或配置了 C# 11)。 结束定界符：结束的 \"\"\" 必须独占一行。如果它和其他字符在同一行，编译器会报错。 修剪行为：理解修剪规则，合理利用它来保持代码美观而不影响字符串内容。 性能：与普通字符串字面量一样，原始字符串字面量也是在编译时确定的，没有运行时性能开销。 可读性：对于简单的单行字符串，传统字符串可能更简洁。原始字符串最适合复杂的多行、高转义需求的场景。 7. 总结 C# 的原始字符串字面量 (\"\"\"...\"\"\") 是一个革命性的特性，它： 极大地提升了处理 JSON、SQL、正则表达式、模板等多行或高转义文本的代码可读性和可维护性。 消除了繁琐的引号和反斜杠转义。 简化了多行字符串的编写。 它是现代 C# 开发中处理复杂字符串文本的首选工具。一旦你开始使用它，就很难再回到传统的字符串拼接和转义方式了。"
  },
  "docs/字符串/比较.html": {
    "href": "docs/字符串/比较.html",
    "title": "| MyCSharpDocs",
    "summary": "首选 StringComparison 枚举 这是最重要、最核心的实践。在调用任何涉及字符串比较的方法时（如 string.Equals, string.Compare, string.StartsWith, string.Contains, string.IndexOf 等），应使用接受 StringComparison 枚举作为参数的重载。 为什么？ 避免歧义：默认的字符串比较行为（通常是区分大小写的序号比较）可能不符合你的业务逻辑。 提高性能：某些比较类型（如 Ordinal）比文化感知比较更快。 增强可读性：代码明确表达了你的意图。 防止错误：尤其是在处理用户输入或跨区域环境时，不正确的比较可能导致安全漏洞或逻辑错误。 常用 StringComparison 成员： 枚举值 含义 推荐场景 :--- :--- :--- Ordinal 区分大小写的序号比较（基于字符的 Unicode 码点）。 首选！ 用于技术性比较，如文件名、URL、GUID、XML 标签、哈希值、字典键等。性能最高。 OrdinalIgnoreCase 不区分大小写的序号比较。 当需要忽略大小写进行技术性比较时（如比较 HTTP 头名称 \"Content-Type\" 和 \"content-type\"）。性能高。 CurrentCulture 基于当前线程的文化设置进行区分大小写的语言学比较。 当需要根据用户的本地化规则对用户可见的字符串进行排序或显示时。 CurrentCultureIgnoreCase 基于当前线程的文化设置进行不区分大小写的语言学比较。 同上，但忽略大小写。 InvariantCulture 基于固定不变的文化（invariant culture）进行区分大小写的语言学比较。 当需要一种与区域无关、稳定一致的比较结果时（例如，在持久化数据或网络协议中）。 InvariantCultureIgnoreCase 基于固定不变的文化进行不区分大小写的语言学比较。 同上，但忽略大小写。 默认选择：Ordinal 或 OrdinalIgnoreCase 微软强烈建议： 对于大多数编程场景，尤其是那些不面向最终用户的、基于技术标识符的比较，请使用 Ordinal 或 OrdinalIgnoreCase。 原因： 性能：序号比较是最快的，因为它直接比较字符的二进制值。 稳定性：结果不会因用户的区域设置而改变。 安全性：避免了因文化差异导致的意外行为。 示例： // ✅ 推荐：使用 StringComparison 明确指定 bool isEqual = string.Equals(str1, str2, StringComparison.Ordinal); bool startsWith = fileName.StartsWith(\"log\\_\", StringComparison.OrdinalIgnoreCase); int index = text.IndexOf(\"ERROR\", StringComparison.OrdinalIgnoreCase); // ❌ 不推荐：依赖默认行为（通常是 Ordinal，但不明确） bool isEqual = str1 == str2; bool startsWith = fileName.StartsWith(\"log\\_\"); // 可能不是你想要的！ 文化感知比较 (CurrentCulture) 的适用场景 仅在以下情况使用 CurrentCulture 或 CurrentCultureIgnoreCase： 比较或排序面向最终用户的文本。 结果将显示给用户，并且需要符合用户的语言习惯。 例如：联系人列表按姓名排序、文档标题搜索等。 // 示例：对用户姓名进行排序 Array.Sort(names, StringComparer.CurrentCulture); 避免使用不带 StringComparison 参数的重载 许多字符串方法有多个重载。应优先选择接受 StringComparison 参数的那个。 // ❌ 避免 if (input.ToLower() == \"yes\") { ... } // ToLower 分配内存，且行为不明确 // ✅ 推荐 if (string.Equals(input, \"yes\", StringComparison.OrdinalIgnoreCase)) { ... } // ❌ 避免 if (path.EndsWith(\".txt\")) { ... } // ✅ 推荐 if (path.EndsWith(\".txt\", StringComparison.OrdinalIgnoreCase)) { ... } 使用 StringComparer 类进行集合操作 当创建基于字符串的集合（如 Dictionary<string, T> 或 HashSet ）时，使用 StringComparer 来指定比较方式。 // 创建一个不区分大小写的字典 var dict = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) { { \"Key1\", \"Value1\" }, { \"KEY2\", \"Value2\" } }; // 这样可以通过 \"key1\" 或 \"KEY1\" 来访问 Console.WriteLine(dict[\"key1\"]); // 输出 \"Value1\" 6. 注意 == 操作符的行为 string 类型重载了 == 操作符，它执行的是区分大小写的序号比较（相当于 StringComparison.Ordinal）。 可以安全使用 == 进行简单的、区分大小写的相等判断。 但如果有忽略大小写的需求，必须使用 Equals 方法并指定 StringComparison.OrdinalIgnoreCase。 string a = \"Hello\"; string b = \"HELLO\"; Console.WriteLine(a == b); // False (Ordinal) Console.WriteLine(string.Equals(a, b, StringComparison.OrdinalIgnoreCase)); // True 7. 跨平台一致性考虑 在 .NET Framework 和 .NET Core/.NET 5+ 之间，或在不同操作系统上，文化感知比较的结果可能略有差异。如果需要绝对一致的结果，优先使用 Ordinal、OrdinalIgnoreCase 或 InvariantCulture。 总结：微软推荐的检查清单 明确指定：在所有字符串比较操作中，使用 StringComparison 枚举。 默认序号：除非有特定的语言学需求，否则优先选择 StringComparison.Ordinal 或 StringComparison.OrdinalIgnoreCase。 用户界面用文化：仅在向用户显示排序或比较结果时，使用 CurrentCulture。 集合用 StringComparer：为字符串集合指定合适的比较器。 避免旧式方法：不要依赖 ToLower()/ToUpper() 进行比较，这既低效又可能出错。 遵循这些实践，可以确保你的字符串比较代码是高效、正确、安全且可维护的。"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | MyCSharpDocs",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}